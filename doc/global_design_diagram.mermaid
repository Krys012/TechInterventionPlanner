classDiagram
%% Base Model
    class Intervention {
        -int id
        -string location
        -time_t date
        -int duration
        -string technicianId
        -string status
        -string comments
        +getType() string
        +setStatus(string)
        +getInfo() string
    }

    class MaintenanceIntervention {
        +getType() string
    }

    class EmergencyIntervention {
        -int priority
        +getType() string
        +getPriority() int
    }

    class Technician {
        -string id
        -string name
        -string specialty
        -string contact
        +getInfo() string
    }

%% Design Pattern: Factory
    class InterventionFactory {
        <<interface>>
        +createIntervention() Intervention*
        +createIntervention(string, time_t, int) Intervention*
    }

    class MaintenanceFactory {
        +createIntervention() Intervention*
        +createIntervention(string, time_t, int) Intervention*
    }

    class EmergencyFactory {
        -int defaultPriority
        +createIntervention() Intervention*
        +createIntervention(string, time_t, int) Intervention*
        +createEmergencyIntervention(string, time_t, int, int) Intervention*
    }

%% Design Pattern: Decorator
    class InterventionDecorator {
        -Intervention* intervention
        +getType() string
        +getInfo() string
    }

    class GPSTrackingDecorator {
        -vector~GPSCoordinate~ trackingData
        -int updateFrequency
        +addCoordinate(double, double, time_t)
        +getCurrentLocation() pair~double, double~
        +setUpdateFrequency(int)
        +getInfo() string
    }

    class AttachmentsDecorator {
        -vector~Attachment~ attachments
        +addAttachment(string, string) bool
        +removeAttachment(string) bool
        +getAttachmentFilenames() vector~string~
        +getInfo() string
    }

%% Design Pattern: Observer
    class InterventionObserver {
        <<interface>>
        +notify(string message)
        +isInterestedIn(string eventType) bool
    }

    class ConsoleObserver {
        -vector~string~ interestedEvents
        +notify(string message)
        +isInterestedIn(string eventType) bool
    }

    class LogObserver {
        -string logFilePath
        +notify(string message)
    }

%% Design Pattern: Facade
    class InterventionManager {
        -map~int, unique_ptr~Intervention~~ interventions
        -TechnicianManager technicianManager
        -shared_ptr~NotificationSystem~ notificationSystem
        -vector~shared_ptr~InterventionObserver~~ observers
        -int nextInterventionId
        +createIntervention(string, string, time_t, int) int
        +deleteIntervention(int) bool
        +modifyIntervention(int, string, time_t, int) bool
        +changeInterventionStatus(int, string, string) bool
        +getInterventionsForDay(time_t) vector~Intervention*~
        +getInterventionCountsForMonth(int, int) map~int, int~
        +assignTechnician(int, string) bool
        +addObserver(shared_ptr~InterventionObserver~)
        +removeObserver(InterventionObserver*)
        +initializeWithSampleData() bool
        +optimizeSchedule(time_t) bool
        +exportSchedule(string, string) bool
    }

%% Design Pattern: Proxy
    class IInterventionManager {
        <<interface>>
        +createIntervention(string, string, time_t, int) int
        +deleteIntervention(int) bool
        +modifyIntervention(int, string, time_t, int) bool
        +changeInterventionStatus(int, string, string) bool
        +getIntervention(int) Intervention*
        +getInterventionsForDay(time_t) vector~Intervention*~
        +getInterventionCountsForMonth(int, int) map~int, int~
        +assignTechnician(int, string) bool
    }

    class InterventionManagerSecure {
        -unique_ptr~InterventionManager~ realManager
        -string currentUser
        -map~string, AccessLevel~ userAccessLevels
        -bool checkAccess(AccessLevel) bool
        -void logAccessAttempt(string, bool) const
        +createIntervention(string, string, time_t, int) int
        +deleteIntervention(int) bool
        +modifyIntervention(int, string, time_t, int) bool
        +changeInterventionStatus(int, string, string) bool
        +assignTechnician(int, string) bool
        +getIntervention(int) Intervention*
        +getInterventionsForDay(time_t) vector~Intervention*~
        +getInterventionCountsForMonth(int, int) map~int, int~
    }

%% Authentication
    class AuthenticationSystem {
        -map~string, UserInfo~ users
        -string currentUser
        +addUser(string, string, string) bool
        +authenticate(string, string) bool
        +logout()
        +getCurrentUser() string
        +getUserRole(string) string
        +currentUserHasRole(string) bool
    }

%% CLI Interface
    class CLI {
        -AuthenticationSystem authSystem
        -unique_ptr~InterventionManagerSecure~ manager
        -bool running
        -string currentUser
        -map~string, CommandHandler~ commandHandlers
        -map~string, string~ commandHelp
        +start()
        +processCommand(string) bool
        +displayMenu() const
        +parseCommand(string) pair~string, vector~string~~
        +handleLogin(vector~string~)
        +handleListInterventions(vector~string~)
        +handleCreateIntervention(vector~string~)
        +handleInitialize(vector~string~)
        +handleExport(vector~string~)
    }

%% Inheritance relationships
    Intervention <|-- MaintenanceIntervention
    Intervention <|-- EmergencyIntervention
    InterventionFactory <|-- MaintenanceFactory
    InterventionFactory <|-- EmergencyFactory
    Intervention <|-- InterventionDecorator
    InterventionDecorator <|-- GPSTrackingDecorator
    InterventionDecorator <|-- AttachmentsDecorator
    InterventionObserver <|-- ConsoleObserver
    InterventionObserver <|-- LogObserver
    IInterventionManager <|.. InterventionManager
    IInterventionManager <|.. InterventionManagerSecure

%% Composition/aggregation relationships
    InterventionDecorator o-- Intervention : contains >
    InterventionManager o-- Intervention : manages >
    InterventionManager o-- Technician : references >
    InterventionManager o-- InterventionObserver : notifies >
    InterventionManagerSecure o-- InterventionManager : encapsulates >
    CLI o-- AuthenticationSystem : uses >
    CLI o-- IInterventionManager : interacts with >
    MaintenanceFactory ..> MaintenanceIntervention : creates >
    EmergencyFactory ..> EmergencyIntervention : creates >